{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["url","App","props","fetchData","axios","get","then","response","res","data","console","log","capture","articles","setState","dataToShow","isLoaded","onSearchChange","event","searchTerm","target","value","isSearched","item","title","toLowerCase","includes","state","this","className","onChange","filter","map","key","onClick","description","React","Component","Search","onSubmit","children","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAIMA,EAAM,0FAENC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,UAAY,WACVC,IAAMC,IAAIL,GACPM,KAAK,SAAAC,GACJ,IAAMC,EAAMD,EAASE,KACrBC,QAAQC,IAAIH,GAEZ,IAAMI,EAAUJ,EAAIK,SAMpB,EAAKC,SAAS,CACZC,WAAYH,EACZI,UAAU,OAxBC,EAiCnBC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CACZK,WAAYD,EAAME,OAAOC,SAnCV,EAwCnBC,WAAa,SAACH,GAAD,OAAgB,SAACI,GAC1B,OAAOA,EAAKC,MAAMC,cAAcC,SAASP,EAAWM,iBAtCtD,EAAKE,MAAQ,CACXZ,WAAY,GACZC,UAAU,EACVG,WAAY,IANG,E,iFAkDjBS,KAAKzB,c,+BAGL,OACE,yBAAK0B,UAAU,OACb,kBAAC,EAAD,CAAQC,SAAUF,KAAKX,gBAAvB,WACA,8EAGEW,KAAKD,MAAMX,SACXY,KAAKD,MAAMZ,WAAWgB,OAAOH,KAAKN,WAAWM,KAAKD,MAAMR,aAAaa,IAAI,SAAAT,GACvE,OACE,yBAAKM,UAAU,OAAOI,IAAKV,EAAMW,QAASX,EAAKvB,KAC7C,4BAAKuB,EAAKC,OACV,2BAAID,EAAKY,gBAIf,6BACI,2DACA,mD,GAvEIC,IAAMC,WAoFlBC,EAAS,SAACpC,GACd,OACE,0BAAMqC,SAAU,uB,GAAWA,WACzB,+BAAQrC,EAAMsC,UACd,2BAAOX,UAAU,OAAOY,KAAK,OAAOX,SAAU5B,EAAM4B,WACpD,4BAAQW,KAAK,UAAb,YAKSxC,ICxFKyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC,iB","file":"static/js/main.9895a14e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nconst url = 'https://newsapi.org/v2/top-headlines?country=us&apiKey=a92fd65580354b0d8cee1ae550fcefc4';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataToShow: [],\n      isLoaded: false,\n      searchTerm: '',\n    }\n  }\n\n  fetchData = ()=> {\n    axios.get(url)\n      .then(response => {\n        const res = response.data;\n        console.log(res);\n\n        const capture = res.articles;\n      \n\n\n        \n\n        this.setState({\n          dataToShow: capture,\n          isLoaded: true,\n        })\n\n\n        \n      })\n\n  }\n\n  onSearchChange = (event) => {\n    this.setState({\n      searchTerm: event.target.value\n    });\n\n  }\n\n  isSearched = (searchTerm) => (item) => {\n      return item.title.toLowerCase().includes(searchTerm.toLowerCase());\n\n  }\n\n  \n\n \n\n  componentDidMount(){\n    this.fetchData();\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <Search onChange={this.onSearchChange} >Search </Search>\n        <p>This app was built by Andrew Nkhata in React.js</p>\n        \n        {\n          this.state.isLoaded?\n          this.state.dataToShow.filter(this.isSearched(this.state.searchTerm)).map(item => {\n            return(\n              <div className=\"card\" key={item} onClick={item.url}>\n                <h2>{item.title}</h2>\n                <p>{item.description}</p>\n              </div>\n            )\n          }):\n          <div>\n              <h1>Loading News from server...</h1>\n              <p>Please wait...</p>\n          </div>\n          \n        }\n        \n        \n      </div>\n    )\n\n  }\n\n}\n\nconst Search = (props) => {\n  return(\n    <form onSubmit={() => this.onSubmit}>\n      <label>{props.children}</label>\n      <input className=\"data\" type=\"text\" onChange={props.onChange} />\n      <button type=\"submit\" >search</button>\n    </form>\n  )\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}